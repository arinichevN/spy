Прослушиватель последовательного порта для протокола ACP.
Постоянно прослушивает заданные последовательные порты и запоминает ответы серверов на
определенные команды с определенным идентификатором.
Получив запрос по TCP от клиента, выдает ему ответ, выловленные из последовательного порта.
Потоки:
	-главный поток приложения;
	-главный поток TCP-сервера (установление соединения с клиентами, активация обслуживающих потоков);
	-обслуживающие потоки TCP-сервера (несколько потоков для обслуживания соединений с клиентами);
	-активатор потоков последовательных портов (если есть неподключенные каналы,
	то ищет последовательные порты по шаблону имени и если находит порт, не имеющий котролирующего
	потока, создает для него контролирующий поток);
	-контролирующие потоки последовательных портов (прослушивает порт и запоминает требуемые ответы).
1 Установка
1.1 Требования
Приложение должно работать в ОС, поддерживающей стандарт POSIX. Скрипт-установщик
работает в командной оболочке bash.
1.2 Настройки:
- место установки исполняемого файла: файл build.sh константа INST_DIR
- место установки файла конфигурации: файл build.sh константа CONF_DIR (должна соответствовать CONF_DIR из main.h)
1.3 Команды для установки:
cd gwst
chmod +x ./build.sh
Полная установка:
sudo ./build.sh full
Для тестирования (файлы не копируются за пределы текущей папки):
./build.sh part_debug

2 Настройка перед запуском
файл ./config/app.tsv:
	port - номер порта TCP сервера,
	cd_s - минимальная продолжительность цикла контролирующих потоков последовательных портов в секундах,
	cd_ns - минимальная продолжительность цикла контролирующих потоков последовательных портов в наносекундах,
	conn_num_max - максимальное количество потоков для обслуживания соединений TCP-сервера (для каждого нового соединения, если
	нет свободного обслуживающего потока, то создается новый),
	serial_pattern - шаблон имени последовательного порта (демон ищет в папке /dev файл с похожим именем, если
	находит, то пытается его отрыть и найти заданные в интерфейсе каналы),
	serial_rate - скорость последовательных портов,
	serial_config - конфигурация последовательных портов (5, 6, 7, 8) && (N, O, E, n, o, e) && (1, 2)
В файле ./config/channel/items.tsv нужно перечислить идентификаторы каналов, которые будут использоваться и дать им ссылки
на файлы с настройками интерфейса:
	id - уникальный номер канала,
	get - название файла (из папки ./config/channel/command/get/) с интерфейсом опроса канала,
В папке ./config/channel/command/get/ нужно создать файл формата TSV и в нем определить команды для опроса каналов ведомых устройств:
	cmd - команда;
Команды, 
3 Запуск
При полной установке запускается автоматически, вместе с операционной системой.
sudo spyst
Если приложение установлено для тестирования:
sudo ./spyst_dbg

4 Использование
4.1 Терминал
Чтобы прочитать данные с определенных каналов, можно использовать утилиту netcat:
printf "<gfts;1>" | nc 127.0.0.1 49188
	, где
		< - начало сообщения,
		gfts - команда,
		; - разделитель,
		1 - номер канала,
		> - конец сообщения.
ответ:
<1;33.180;562067385;570982444;1>
формат ответа:
<номер_канала;измеренная_величина;время_с;время_нс;статус>
Чтобы получить распечатку основных данных приложения:
printf "<apr>" | nc 127.0.0.1 49188
4.2 Графический интерфейс пользователя
Следующие приложения могут получать данные от этого приложения:
для чтения данных с модулей ввода:
https://github.com/arinichevN/monitor_clt
для отправки данных на модули вывода:
https://github.com/arinichevN/outctrl_clt
для управления регуляторами:
https://github.com/arinichevN/reg_cl






